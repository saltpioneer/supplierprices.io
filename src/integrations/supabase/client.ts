// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';

// Clean env inputs in case quotes/semicolons/spaces were added in .env.local
const clean = (v?: string) => (v ?? "")
  .trim()
  .replace(/^['"`]+/, "")
  .replace(/['"`]+$/, "")
  .replace(/;+\s*$/, "")
  .trim();

const SUPABASE_URL = clean(import.meta.env.VITE_SUPABASE_URL as string);
const SUPABASE_PUBLISHABLE_KEY = clean(import.meta.env.VITE_SUPABASE_ANON_KEY as string);

// Debug logging to help diagnose env issues
// eslint-disable-next-line no-console
console.log("Raw env URL:", import.meta.env.VITE_SUPABASE_URL);
// eslint-disable-next-line no-console
console.log("Cleaned URL:", SUPABASE_URL);

if (!/^https?:\/\//i.test(SUPABASE_URL)) {
  // eslint-disable-next-line no-console
  console.error("Invalid VITE_SUPABASE_URL:", SUPABASE_URL);
}
if (!SUPABASE_PUBLISHABLE_KEY) {
  // eslint-disable-next-line no-console
  console.error("Missing VITE_SUPABASE_ANON_KEY env value");
}

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

const isValidUrl = /^https?:\/\//i.test(SUPABASE_URL);
const isValidKey = !!SUPABASE_PUBLISHABLE_KEY && SUPABASE_PUBLISHABLE_KEY !== "placeholder_key";

export const supabase = isValidUrl && isValidKey
  ? createClient(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
      auth: {
        storage: localStorage,
        persistSession: true,
        autoRefreshToken: true,
      }
    })
  : {
      from: () => ({
        select: () => Promise.resolve({ data: [], error: null }),
        insert: () => Promise.resolve({ data: [], error: null }),
        update: () => Promise.resolve({ data: [], error: null }),
        delete: () => Promise.resolve({ data: [], error: null }),
      }),
      auth: {
        getUser: () => {
          const raw = localStorage.getItem("mock_auth_user");
          return Promise.resolve({ data: raw ? { user: JSON.parse(raw) } : null, error: null });
        },
        signUp: async ({ email }: any) => {
          const isMaster = String(import.meta.env.VITE_MASTER_EMAIL || "").toLowerCase() === String(email || "").toLowerCase();
          const user = { id: "mock-user", email, is_master: isMaster };
          localStorage.setItem("mock_auth_user", JSON.stringify(user));
          return { data: { user }, error: null } as any;
        },
        signInWithPassword: async ({ email }: any) => {
          localStorage.setItem("mock_auth_user", JSON.stringify({ id: "mock-user", email }));
          return { data: { user: { id: "mock-user" } }, error: null } as any;
        },
        signOut: async () => {
          localStorage.removeItem("mock_auth_user");
          return { error: null } as any;
        },
        signInWithOAuth: async ({ provider }: any) => {
          localStorage.setItem("mock_auth_user", JSON.stringify({ id: "mock-user", provider }));
          return { data: { url: "/#/app/dashboard" }, error: null } as any;
        },
        onAuthStateChange: (callback: any) => ({ data: { subscription: { unsubscribe: () => {} } }, error: null }),
      }
    } as any;